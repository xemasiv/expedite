{"version":3,"sources":["..\\node_modules\\serialize-javascript\\index.js","centaurus.js"],"names":["ActionTypes","LOAD_SCRIPTS","REGISTER_FUNCTIONS","CALL_FUNCTION","uuid","a","Math","random","toString","replace","Centaurus","workerPath","worker","Worker","send","something","resolve","postMessage","scripts","action","functions","Object","keys","map","key","fn","parameters","Promise","reject","module","exports"],"mappingsvHA;;;;;;;;AAEA,IAAMA,cAAc;AAClBC,gBAAc,CADI;AAElBC,sBAAoB,CAFF;AAGlBC,iBAAe;AAHG,CAApB;;AAMA,IAAMC,OAAO,SAAPA,IAAO,CAACC,CAAD,EAAO;AAAC,SAAOA,IAAE,CAACA,IAAEC,KAAKC,MAAL,KAAc,EAAd,IAAkBF,IAAE,CAAvB,EAA0BG,QAA1B,CAAmC,EAAnC,CAAF,GAAyC,CAAC,CAAC,GAAD,IAAM,CAAC,GAAP,GAAW,CAAC,GAAZ,GAAgB,CAAC,GAAjB,GAAqB,CAAC,IAAvB,EAA6BC,OAA7B,CAAqC,QAArC,EAA+CL,IAA/C,CAAhD;AAAqG,CAA1H;;IAEMM;AACJ,qBAAaC,UAAb,EAAyB;AAAA;;AAAA;;AACvB,QAAIC,SAAS,IAAIC,MAAJ,CAAWF,UAAX,CAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,IAAL,GAAY,UAACC,SAAD,EAAYC,OAAZ,EAAwB;AAClC,YAAKJ,MAAL,CAAYK,WAAZ,CAAwB,mCAAUF,SAAV,CAAxB;AACD,KAFD;AAGD;;;;kCACwB;AAAA,wCAATG,OAAS;AAATA,eAAS;AAAA;;AACvB,WAAKJ,IAAL,CAAU;AACRK,gBAAQnB,YAAYC,YADZ;AAERiB;AAFQ,OAAV;AAID;;;sCACkBE,WAAW;AAAA;;AAC5BC,aAAOC,IAAP,CAAYF,SAAZ,EAAuBG,GAAvB,CAA2B,UAACC,GAAD,EAAS;AAClC,eAAKV,IAAL,CAAU;AACRK,kBAAQnB,YAAYE,kBADZ;AAERsB,eAAKA,GAFG;AAGRC,cAAIL,UAAUI,GAAV;AAHI,SAAV;AAKA,eAAKA,GAAL,IAAY,YAAmB;AAAA,6CAAfE,UAAe;AAAfA,sBAAe;AAAA;;AAC7B,iBAAO,IAAIC,OAAJ,CAAY,UAACX,OAAD,EAAUY,MAAV,EAAqB;AACtC,mBAAKd,IAAL,CAAU;AACRK,sBAAQnB,YAAYG,aADZ;AAERqB,mBAAKA,GAFG;AAGRE;AAHQ,aAAV;AAKAV;AACD,WAPM,CAAP;AAQD,SATD;AAUD,OAhBD;AAiBD;;;;;;AAGHa,OAAOC,OAAP,GAAiBpB,SAAjB","file":"centaurus.map","sourceRoot":"..\\src","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID                 = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n        if (!value) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp and date placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return regexps[valueIndex].toString();\n        }\n\n        var fn           = functions[valueIndex];\n        var serializedFn = fn.toString();\n\n        if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n            throw new TypeError('Serializing native function: ' + fn.name);\n        }\n\n        return serializedFn;\n    });\n}\n","import serialize from 'serialize-javascript';\r\n\r\nconst ActionTypes = {\r\n  LOAD_SCRIPTS: 0,\r\n  REGISTER_FUNCTIONS: 1,\r\n  CALL_FUNCTION: 2\r\n};\r\n\r\nconst uuid = (a) => {return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g ,uuid)}\r\n\r\nclass Centaurus {\r\n  constructor (workerPath) {\r\n    let worker = new Worker(workerPath);\r\n    this.worker = worker;\r\n    this.send = (something, resolve) => {\r\n      this.worker.postMessage(serialize(something));\r\n    };\r\n  }\r\n  loadScripts (...scripts) {\r\n    this.send({\r\n      action: ActionTypes.LOAD_SCRIPTS,\r\n      scripts\r\n    });\r\n  }\r\n  registerFunctions (functions) {\r\n    Object.keys(functions).map((key) => {\r\n      this.send({\r\n        action: ActionTypes.REGISTER_FUNCTIONS,\r\n        key: key,\r\n        fn: functions[key]\r\n      });\r\n      this[key] = (...parameters) => {\r\n        return new Promise((resolve, reject) => {\r\n          this.send({\r\n            action: ActionTypes.CALL_FUNCTION,\r\n            key: key,\r\n            parameters\r\n          });\r\n          resolve();\r\n        });\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = Centaurus;\r\n"]}