{"version":3,"sources":["..\\node_modules\\serialize-javascript\\index.js","centaurus.worker.js"],"names":["ActionTypes","LOAD_SCRIPTS","REGISTER_FUNCTIONS","CALL_FUNCTION","LocalFunctions","self","addEventListener","data","eval","action","scripts","map","script","importScripts","key","fn","resolve","parameter","postMessage","id","apply","parameters","console","warn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;AAEA,IAAMA,cAAc;AAClBC,gBAAc,CADI;AAElBC,sBAAoB,CAFF;AAGlBC,iBAAe;AAHG,CAApB;AAKA,IAAMC,iBAAiB,EAAvB;;AAEAC,KAAKC,gBAAL,CAAsB,SAAtB,EAAiC,gBAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAC7CA,SAAOC,KAAK,MAAMD,IAAN,GAAa,GAAlB,CAAP;AACA,UAAQA,KAAKE,MAAb;AACE,SAAKT,YAAYC,YAAjB;AACEM,WAAKG,OAAL,CAAaC,GAAb,CAAiB,UAACC,MAAD;AAAA,eAAYC,cAAcD,MAAd,CAAZ;AAAA,OAAjB;AACA;AACF,SAAKZ,YAAYE,kBAAjB;AACEE,qBAAeG,KAAKO,GAApB,IAA2BP,KAAKQ,EAAhC;AACA;AACF,SAAKf,YAAYG,aAAjB;AACE,UAAIa,UAAU,SAAVA,OAAU,CAACC,SAAD;AAAA,eAAeC,YAAY,mCAAU;AACjDC,cAAIZ,KAAKY,EADwC;AAEjDF;AAFiD,SAAV,CAAZ,CAAf;AAAA,OAAd;AAIAb,qBAAeG,KAAKO,GAApB,EAAyBM,KAAzB,CAA+Bf,IAA/B,EAAqC,CAAEW,OAAF,EAAWT,KAAKc,UAAhB,CAArC;AACA;AACF;AACEC,cAAQC,IAAR,CAAa,mBAAb,EAAkChB,IAAlC;AACA;AAhBJ;AAkBD,CApBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"centaurus.worker.map","sourceRoot":"..\\src","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID                 = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n        if (!value) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp and date placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return regexps[valueIndex].toString();\n        }\n\n        var fn           = functions[valueIndex];\n        var serializedFn = fn.toString();\n\n        if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n            throw new TypeError('Serializing native function: ' + fn.name);\n        }\n\n        return serializedFn;\n    });\n}\n","import serialize from 'serialize-javascript';\r\n\r\nconst ActionTypes = {\r\n  LOAD_SCRIPTS: 0,\r\n  REGISTER_FUNCTIONS: 1,\r\n  CALL_FUNCTION: 2\r\n};\r\nconst LocalFunctions = {};\r\n\r\nself.addEventListener('message', ({ data }) => {\r\n  data = eval('(' + data + ')');\r\n  switch (data.action) {\r\n    case ActionTypes.LOAD_SCRIPTS:\r\n      data.scripts.map((script) => importScripts(script));\r\n      break;\r\n    case ActionTypes.REGISTER_FUNCTIONS:\r\n      LocalFunctions[data.key] = data.fn;\r\n      break;\r\n    case ActionTypes.CALL_FUNCTION:\r\n      let resolve = (parameter) => postMessage(serialize({\r\n        id: data.id,\r\n        parameter\r\n      }));\r\n      LocalFunctions[data.key].apply(self, [ resolve, data.parameters ]);\r\n      break;\r\n    default:\r\n      console.warn('unhandled message', data);\r\n      break;\r\n  }\r\n});\r\n"]}